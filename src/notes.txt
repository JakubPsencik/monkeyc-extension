function onChange(document : vscode.TextDocument, goConfig: vscode.WorkspaceConfiguration) {
	let uri = document.uri;
	/*check(uri.fsPath, goConfig).then((errors: any[]) => {
	  diagnosticCollection.clear();
	  let diagnosticMap: Map<string, vscode.Diagnostic[]> = new Map();
	  errors.forEach(error => {
		let canonicalFile = vscode.Uri.file(error.file).toString();
		let range = new vscode.Range(error.line-1, error.startColumn, error.line-1, error.endColumn);
		let diagnostics = diagnosticMap.get(canonicalFile);
		if (!diagnostics) { diagnostics = []; }
		diagnostics.push(new vscode.Diagnostic(range, error.msg, error.severity));
		diagnosticMap.set(canonicalFile, diagnostics);
	  });
	  diagnosticMap.forEach((diags, file) => {
		diagnosticCollection.set(vscode.Uri.parse(file), diags);
	  });
	});*/
  }
  -----------------------------------------------------------------------------------------------------------
  export function subscribeToDocumentChanges(context: vscode.ExtensionContext, programDiagnostics: vscode.DiagnosticCollection): void {
	if (vscode.window.activeTextEditor) {
		refreshDiagnostics(vscode.window.activeTextEditor.document, programDiagnostics);
	}
	context.subscriptions.push(
		vscode.window.onDidChangeActiveTextEditor(editor => {
			if (editor) {
				refreshDiagnostics(editor.document, programDiagnostics);
			}
		})
	);
	context.subscriptions.push(
		vscode.workspace.onDidChangeTextDocument(e => refreshDiagnostics(e.document, programDiagnostics))
	);

	context.subscriptions.push(
		vscode.workspace.onDidCloseTextDocument(doc => programDiagnostics.delete(doc.uri))
	);

}
  -----------------------------------------------------------------------------------------------------------
  /**
 * Analyzes the text document for problems. 
 * This demo diagnostic problem provider finds all mentions of 'emoji'.
 * @param doc text document to analyze
 * @param programDiagnostics diagnostic collection
 */
export function refreshDiagnostics(doc: vscode.TextDocument, programDiagnostics: vscode.DiagnosticCollection): void {
	const diagnostics: vscode.Diagnostic[] = [];

	for (let lineIndex = 0; lineIndex < doc.lineCount; lineIndex++) {
		const lineOfText = doc.lineAt(lineIndex);
		if (lineOfText.text.includes(PROGRAM)) {
			diagnostics.push(createDiagnostic(doc, lineOfText, lineIndex));
		}
	}

	programDiagnostics.set(doc.uri, diagnostics);
}
-----------------------------------------------------------------------------------------------------------
function createDiagnostic(doc: vscode.TextDocument, lineOfText: vscode.TextLine, lineIndex: number): vscode.Diagnostic {
	// find where in the line of thet the 'emoji' is mentioned
	const index = lineOfText.text.indexOf(PROGRAM);

	// create range that represents, where in the document the word is
	const range = new vscode.Range(lineIndex, index, lineIndex, index + PROGRAM.length);

	const diagnostic = new vscode.Diagnostic(range, "message",
		vscode.DiagnosticSeverity.Information);
	diagnostic.code = PROGRAM_MENTION;
	return diagnostic;
}